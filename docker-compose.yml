services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: healthcare_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME:-healthcare_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - healthcare_network

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: healthcare_backend
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 4 --timeout 120 config.wsgi:application"
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8000"
    environment:
      DEBUG: ${DEBUG:-True}
      SECRET_KEY: ${SECRET_KEY:-django-insecure-dev-key}
      DB_NAME: ${DB_NAME:-healthcare_db}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_HOST: db
      DB_PORT: 5432
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:80}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - healthcare_network
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/fhir/Patient/\", timeout=5)'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Vue Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: healthcare_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - healthcare_network
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost/ || exit 1"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local

networks:
  healthcare_network:
    driver: bridge
