---
# Backend role - Django application setup

- name: Create Python virtual environment
  command: python3.11 -m venv {{ app_directory }}/backend/venv
  args:
    creates: "{{ app_directory }}/backend/venv/bin/python"
  become_user: "{{ app_user }}"

- name: Upgrade pip in virtual environment
  pip:
    name: pip
    state: latest
    virtualenv: "{{ app_directory }}/backend/venv"
    virtualenv_command: "python3.11 -m venv"
  become_user: "{{ app_user }}"

- name: Install Python dependencies
  pip:
    requirements: "{{ app_directory }}/backend/requirements.txt"
    virtualenv: "{{ app_directory }}/backend/venv"
    virtualenv_command: "python3.11 -m venv"
  become_user: "{{ app_user }}"

- name: Create .env file from template
  template:
    src: env.j2
    dest: "{{ app_directory }}/.env"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600'

- name: Make manage.py executable
  file:
    path: "{{ app_directory }}/backend/manage.py"
    mode: '0755'

- name: Run database migrations
  command: "{{ app_directory }}/backend/venv/bin/python manage.py migrate --noinput"
  args:
    chdir: "{{ app_directory }}/backend"
  become_user: "{{ app_user }}"
  when: run_migrations
  register: migrate_result
  changed_when: "'No migrations to apply' not in migrate_result.stdout"

- name: Collect static files
  command: "{{ app_directory }}/backend/venv/bin/python manage.py collectstatic --noinput"
  args:
    chdir: "{{ app_directory }}/backend"
  become_user: "{{ app_user }}"
  when: collect_static
  register: collectstatic_result
  changed_when: "'0 static files copied' not in collectstatic_result.stdout"

- name: Create demo user
  shell: |
    {{ app_directory }}/backend/venv/bin/python {{ app_directory }}/backend/manage.py shell << 'EOF'
    from django.contrib.auth.models import User
    if not User.objects.filter(username='demo').exists():
        User.objects.create_user('demo', 'demo@example.com', 'demo123')
        print('Demo user created')
    else:
        print('Demo user already exists')
    EOF
  args:
    executable: /bin/bash
  become_user: "{{ app_user }}"
  when: create_demo_user | default(false)
  register: demo_user_result
  changed_when: "'Demo user created' in demo_user_result.stdout"

- name: Seed database with realistic data
  command: "{{ app_directory }}/backend/venv/bin/python seed_realistic_data.py"
  args:
    chdir: "{{ app_directory }}/backend"
  become_user: "{{ app_user }}"
  when: seed_database | default(false)
  ignore_errors: yes

- name: Create systemd service for backend
  template:
    src: healthcare-backend.service.j2
    dest: /etc/systemd/system/healthcare-backend.service
    mode: '0644'
  notify:
    - reload systemd
    - restart backend

- name: Enable and start backend service
  service:
    name: healthcare-backend
    state: started
    enabled: yes
